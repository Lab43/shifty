// =============
// configuration
// =============

// metrics
$columnWidth: 70px !default;
$gutterWidth: 30px !default;
$outsideGutterWidth: 18px !default;

// layout mode: float or inline-block
$layoutMode: 'float' !default;

// breakpoints
$startFluid: true !default;
$breakpoints: 4, 6, 8, 12 !default;

// stripes
$stripes: false !default;
$stripeColor: #e9e9e9 !default;
$breakpointStripeColor: #aaa !default;

// class names
$container: 'container' !default;
$grid: 'grid' !default;
$span: 'span' !default;
$group: 'group' !default;
$offset: 'offset' !default;
$break: 'break' !default;
$unbreak: 'unbreak' !default;




// ======
// mixins
// ======


// media query based on column count
@mixin at($columns) {
  @media only screen and (min-width: $columnWidth * $columns + $gutterWidth * ($columns - 1 ) + $outsideGutterWidth * 2) {
    @content;
  }
}

// calculate cell with
@mixin _cellWidth($columns) {
  width: $columnWidth * $columns + $gutterWidth * ( $columns - 1 );
}

// calculate offset margin
@mixin _offsetMargin($columns) {
  margin-left: $columnWidth * $columns + $gutterWidth * ( $columns + 1 );
}


// grid and cell sizing
@mixin _sizing($start, $end) {

  // grid size
  .#{$container} {
    width: $columnWidth * ($end) + $gutterWidth * ($end - 1 );
  }

  // use float:left or display:inline-block depending on layout mode
  // we add $start to the end of the placeholder selector to prevent selectors from different breakpoints (i.e. media queries) from getting grouped together
  %layout-#{$start} {
    @if $layoutMode == 'float' {
      float: left;
    } @else if $layoutMode == 'inline-block' {
      display: inline-block;
    }
  }

  // .at* cell sizing
  @for $i from 1 through $start - 1 {
    .at#{$end}-#{$span}#{$i},
    .at#{$end}-#{$group}#{$i} > * {
      @include _cellWidth($i);
      @extend %layout-#{$start};
    }
  }

  // .at* cell and regular cell sizing
  @for $i from $start through $end - 1 {
    .#{$span}#{$i},
    .#{$group}#{$i} > *,
    .at#{$end}-#{$span}#{$i},
    .at#{$end}-#{$span}#{$i}-#{$group} > * {
      @include _cellWidth($i);
      @extend %layout-#{$start};
    }
  }

  // .at* offset sizing
  @for $i from 0 through $start - 1 {
    .at#{$end}-#{$offset}#{$i} {
      @include _offsetMargin($i);
    }
  }

  // .at* and regular offset sizing
  @for $i from $start through $end - 1 {
    .#{$offset}#{$i}, .at#{$end}-#{$offset}#{$i} {
      @include _offsetMargin($i);
    }
  }

  // only output .at*-break and .at*-unbreak if layout mode is float
  @if $layoutMode == 'float' {
    // break
    .at#{$end}-#{$break} {
      clear: left;
    }

    // unbreak
    .at#{$end}-#{$unbreak} {
      clear: none;
    }
  }

  // show
  .at#{$end}-show {
    display: block;
  }

  // hide
  .at#{$end}-hide {
    display: none;
  }
}




// =============
// global styles
// =============

$firstBreakpoint: nth($breakpoints, 1);

.#{$container} {
  margin: 0 auto;
  padding: 0 $outsideGutterWidth;
  -webkit-box-sizing: content-box;
     -moz-box-sizing: content-box;
          box-sizing: content-box;
}

.#{$grid} {
  margin-left: -$gutterWidth;
  // clearfix
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

[class*="#{$span}"],
[class*="#{$group}"] > * {
  margin-left: $gutterWidth;
}

// only output .break if layout mode is float
@if $layoutMode == 'float' {
  .#{$break} {
    clear: left;
  }
}

// hide .at*-show until breakpoint is reached
%hide {
  display: none;
}
@each $breakpoint in $breakpoints {
  .at#{$breakpoint}-show {
    @extend %hide;
  }
}




// ================
// first breakpoint
// ================

// start with fluid layout
@if $startFluid {

  @include at($firstBreakpoint) {
    @include _sizing(1, $firstBreakpoint);
  }

// start with first breakpoint, forcing browser to scroll/scale
} @else {
  @include _sizing(1, $firstBreakpoint);
}




// =====================
// remaining breakpoints
// =====================

$previousBreakpoint: $firstBreakpoint;

@each $breakpoint in $breakpoints {

  @if $breakpoint != $firstBreakpoint {

    @include at($breakpoint) {
      @include _sizing($previousBreakpoint, $breakpoint);
    }

    $previousBreakpoint: $breakpoint;
  }
}




// ============
// grid stripes
// ============

@if $stripes {

  // stripes for first column
  $totalColumns: nth($breakpoints, length($breakpoints));
  $webkit-gradients: -webkit-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
                     -webkit-linear-gradient(left, $stripeColor 1%, $stripeColor 100%);
  $moz-gradients:       -moz-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
                        -moz-linear-gradient(left, $stripeColor 1%, $stripeColor 100%);
  $ms-gradients:         -ms-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
                         -ms-linear-gradient(left, $stripeColor 1%, $stripeColor 100%);
  $o-gradients:           -o-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
                          -o-linear-gradient(left, $stripeColor 1%, $stripeColor 100%);
  $gradients:                linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
                             linear-gradient(left, $stripeColor 1%, $stripeColor 100%);
  $positions: $outsideGutterWidth - 1 0, $outsideGutterWidth + $columnWidth 0;

  // stripes for remaining column
  @for $i from 2 through $totalColumns {

    $thisColor: $stripeColor;
    @each $breakpoint in $breakpoints {
      // if this is a breakpoint, change color
      @if $breakpoint == $i {
        $thisColor: $breakpointStripeColor;
      }
    }
    $webkit-gradients: append($webkit-gradients, (
      -webkit-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
      -webkit-linear-gradient(left, $thisColor 1%, $thisColor 100%)
    ));
    $moz-gradients: append($moz-gradients, (
      -moz-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
      -moz-linear-gradient(left, $thisColor 1%, $thisColor 100%)
    ));
    $ms-gradients: append($ms-gradients, (
      -ms-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
      -ms-linear-gradient(left, $thisColor 1%, $thisColor 100%)
    ));
    $o-gradients: append($o-gradients, (
      -o-linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
      -o-linear-gradient(left, $thisColor 1%, $thisColor 100%)
    ));
    $gradients: append($gradients, (
      linear-gradient(left, $stripeColor 1%, $stripeColor 100%),
      linear-gradient(left, $thisColor 1%, $thisColor 100%)
    ));
    $positions: append($positions, (
      $outsideGutterWidth + $columnWidth * ($i - 1) + $gutterWidth * ($i - 1) - 1 0,
      $outsideGutterWidth + $columnWidth * $i + $gutterWidth * ($i - 1) 0
    ));
  }

  // output stripes
  .#{$container} {
    background-image: $webkit-gradients;
    background-image:    $moz-gradients;
    background-image:      $o-gradients;
    background-image:        $gradients;
    -webkit-background-size: 1px 1px;
       -moz-background-size: 1px 1px;
         -o-background-size: 1px 1px;
            background-size: 1px 1px;
    background-position: $positions;
    background-repeat: repeat-y;
  }
  .#{$container}.no-stripes {
    background-image: none;
  }
}